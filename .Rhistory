is.factor(time_signature.f)
time_signature.f
music.time_signature <-levels(time_signature.f)
music.time_signature
time_signature.f1 <- as.integer(time_signature.f)
time_signature.f1
#mode to numeric feature
is.factor(mode)
sum(is.na(mode))
mode
mode.f <- factor(mode)
is.factor(mode.f)
mode.f
music.mode <-levels(mode.f)
music.mode
mode.f1 <- as.integer(mode.f)
mode.f1
Spotify_truncated <- Spotify[, -which(names(Spotify) %in% c("track_name", "track_id","artist_name","key","mode","time_signature", "genre"))]
Spotify_truncated$genre.f1 <- genre.f1
Spotify_truncated$key.f1 <- key.f1
Spotify_truncated$time_signature.f1 <- time_signature.f1
Spotify_truncated$mode.f1 <- mode.f1
cor(Spotify_truncated)
str(Spotify_truncated)
library(data.table)
Spotify_table <- data.table(Spotify_truncated)
descriptive_stats <- function(feature){
freq_feature <- Spotify_table[, .N, by = feature]
pie_feature<- pie(freq_feature$N, labels = freq_feature$feature, main = "Frequenza generi musicali")
bar_feature <- barplot(freq_feature$N, names.arg= freq_feature$feature, main = "Frequenza generi musicali")
dens_feature <- density(freq_feature$N, na.rm=TRUE)
boxplot_feature <- boxplot(freq_feature$N)
return (list(freq_feature, pie_feature, bar_feature, dens_feature, boxplot_feature))
}
# Create a color palette for the different modes
mode_colors <- c("mode1" = "red", "mode2" = "blue", "mode3" = "green")
# Add more modes and their corresponding colors if needed
# Create a scatter plot for each data point
tempo_plot <- vector()
mode_plot <- vector()
valence_plot <- vector()
for (i in 1:nrow(Spotify_truncated)) {
mode_plot <- rbind(mode_plot,Spotify_truncated$mode.f1[i])
tempo_plot <- rbind(tempo_plot,Spotify_truncated$tempo[i])
valence_plot <- rbind(valence_plot,Spotify_truncated$valence[i])
#label <- labels[i]
}
# Create a color palette for the different modes
mode_colors <- c("mode1" = "red", "mode2" = "blue", "mode3" = "green")
# Add more modes and their corresponding colors if needed
# Create a scatter plot for each data point
tempo_plot <- vector()
mode_plot <- vector()
valence_plot <- vector()
for (i in 1:nrow(Spotify_truncated)) {
mode_plot <- rbind(mode_plot,Spotify_truncated$mode.f1[i])
tempo_plot <- rbind(tempo_plot,Spotify_truncated$tempo[i])
valence_plot <- rbind(valence_plot,Spotify_truncated$valence[i])
#label <- labels[i]
}
color <- mode_colors[mode_plot]  # Get the color corresponding to the mode
# Plot the scatter point with the specific color
# Set the bar width
bar_width <- 0.8
color_values <- Spotify_truncated$valence
# Create the barplot
barplot(tempo_plot,
width = bar_width,
space = 1,
col = color_values,
xaxt = "n",
xlab = "Mode",
ylab = "Tempo")
# Add x-axis labels
axis(1, at = bar_width/2, labels = c("mode1", "mode2"))
color <- mode_colors[mode_plot]  # Get the color corresponding to the mode
points(tempo_plot, valence_plot, col = color, pch = 16)
points(tempo_plot, valence_plot, col = color, pch = 16)
plot(tempo_plot, valence_plot, col = color, pch = 16)
# Create the barplot
barplot(mode_plot, tempo_plot,
width = bar_width,
space = 1,
col = color_values,
xaxt = "n",
xlab = "Mode",
ylab = "Tempo")
# Add x-axis labels
axis(1, at = bar_width/2, labels = c("mode1", "mode2"))
# Add x-axis labels
axis(2, at = bar_width/2, labels = c("mode1", "mode2"))
library(ggplot2)
# Example data frame
data <- data.frame(mode = c("mode1", "mode1", "mode2", "mode2"),
tempo = c(120, 130, 140, 150),
variance = c(0.8, 0.5, 0.6, 0.9))
# Create the bar plot
ggplot(data, aes(x = mode_plot, y = tempo_plot, fill = as.factor(variance_plot))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = mode_plot, y = tempo_plot, fill = as.factor(valence_plot))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(Spotify_truncated$valence))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,1))) +
scale_fill_discrete(name = "Variance") +
ylab("Tempo") +
model_1_lin <- lm(popularity ~ .-popularity-key.f1-mode.f1-tempo, data = Spotify_truncated)
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,1)))) +
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,1)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
#geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = as.factor(Spotify_truncated$mode.f1), y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = Spotify_truncated$mode.f1, y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
geom_col(position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = as.factor(Spotify_truncated$mode.f1), y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
geom_col(position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = as.factor(Spotify_truncated$mode.f1), y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
geom_bar(position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(data, aes(x = as.factor(Spotify_truncated$mode.f1), y = Spotify_truncated$tempo, fill = as.factor(round(Spotify_truncated$valence,0)))) +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = cumsum(tempo), fill = as.factor(round(valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_point(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, color = variance)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, color = valence)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
ggplot(Spotify_truncated, aes(x = mode.f1, y = round(tempo,0), color = valence)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
num_bins <- 4
bin_boundaries <- seq(min(Spotify_truncated$tempo), max(Spotify_truncated$tempo), length.out = num_bins + 1)
# Create a new column with tempo values in bins
Spotify_truncated$tempo_bins <- cut(Spotify_truncated$tempo, breaks = bin_boundaries, labels = FALSE, include.lowest = TRUE)
# Create the bar plot
ggplot(Spotify_truncated, aes(x = mode.f1, y = tempo, fill = as.factor(round(valence,0)))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete(name = "Variance") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Bar Plot: Tempo by Mode (Colored by Variance)")
ggplot(Spotify_truncated, aes(x = mode.f1, y = round(tempo,0), color = valence)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
custom_ranges <- c(0, 100, 120, 140, Inf)
# Create a new column with tempo values grouped into ranges
data$tempo_group <- cut(data$tempo, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
custom_ranges <- c(0, 100, 120, 140, Inf)
# Create a new column with tempo values grouped into ranges
Spotify_truncated$tempo_group <- cut(Spotify_truncated$tempo, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
ggplot(Spotify_truncated, aes(x = mode.f1, y =tempo_group , color = valence)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
xlab("Mode") +
ylab("Tempo") +
ggtitle("Scatter Plot: Tempo by Mode (Colored by Variance)")
plot(tempo_group, valence_plot, col = color)
plot(Spotify_truncatedtempo_group, valence_plot, col = color)
plot(Spotify_truncated$tempo_group, valence_plot, col = color)
custom_ranges <- c(0, 25, 50, 75, 100, 125, 150, Inf)
# Create a new column with tempo values grouped into ranges
Spotify_truncated$tempo_group <- cut(Spotify_truncated$tempo, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
custom_ranges <- c(0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250 Inf)
custom_ranges <- c(0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250 , Inf)
# Create a new column with tempo values grouped into ranges
Spotify_truncated$tempo_group <- cut(Spotify_truncated$tempo, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
plot(Spotify_truncated$tempo_group, valence_plot, col = color)
ggplot(Spotify_truncated, aes(x = acousticness , fill = popularity)) +
geom_density(alpha=0.5) +
xlab("Acousticness") +
ggtitle("Density Plot: acousticness by popularity ")
ggplot(Spotify_truncated, aes(x = acousticness , fill = as.factor(popularity))) +
geom_density(alpha=0.5) +
xlab("Acousticness") +
ggtitle("Density Plot: acousticness by popularity ")
custom_ranges <- c(0, 25, 50, 75, 100, Inf)
# Create a new column with tempo values grouped into ranges
Spotify_truncated$popularity_group <- cut(Spotify_truncated$popularity, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
ggplot(Spotify_truncated, aes(x = acousticness , fill = as.factor(popularity_group))) +
geom_density(alpha=0.5) +
xlab("Acousticness") +
ggtitle("Density Plot: acousticness by popularity ")
# Canzoni popolarity raremente sono acustiche
ggplot(Spotify_truncated, aes(x = danceability , fill = as.factor(popularity_group))) +
geom_density(alpha=0.5) +
xlab("Acousticness") +
ggtitle("Density Plot: acousticness by popularity ")
# Canzoni popolarity raremente sono acustiche
ggplot(Spotify_truncated, aes(x = danceability , fill = as.factor(popularity_group))) +
geom_density(alpha=0.5) +
xlab("Danceability") +
ggtitle("Density Plot: acousticness by popularity ")
ggplot(Spotify_truncated, aes(x = energy , fill = as.factor(popularity_group))) +
geom_density(alpha=0.5) +
xlab("Energy") +
ggtitle("Density Plot: acousticness by popularity ")
#canzoni popolari sono più energiche
ggplot(Spotify_truncated, aes(x = loudness , fill = as.factor(popularity_group))) +
geom_density(alpha=0.5) +
xlab("loudness") +
ggtitle("Density Plot: loudness by popularity ")
ggplot(Spotify_truncated, aes(x = danceability , fill = as.factor(round(valence,1)))) +
geom_density(alpha=0.5) +
xlab("loudness") +
ggtitle("Density Plot:  danceability by valence ")
boxplot(Spotify_truncated$popularity)
plot(Spotify_truncated$popularity, Spotify_truncated$danceability)
model_2_lin <- lm(valence ~ danceability, data = Spotify_truncated)
summary(model_2_lin)
correlation(Spotify_truncated, partial=TRUE)
install.packages("correlation")
library(correlation)
library(correlation)
correlation(Spotify_truncated, partial=TRUE)
library(correlation)
correlation(Spotify_truncated, partial=TRUE)
# Create a new column with tempo values grouped into ranges
Spotify_truncated$popularity_group <- cut(Spotify_truncated$popularity, breaks = custom_ranges, labels = FALSE, include.lowest = TRUE)
summary(Spotify_truncated)
corrplot(cor(Spotify_truncated[,-11]), method = 'number', diag=FALSE)
library(corrplot)
corrplot(cor(Spotify_truncated[,-11]), method = 'number', diag=FALSE)
ggplot(Spotify_truncated, aes(x = round(energy,2) , fill = (round(loudness,2)))) +
geom_density(alpha=0.5) +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
ggplot(Spotify_truncated, aes(x = round(energy,2) , fill = (round(loudness,2)))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
ggplot(Spotify_truncated, aes(round(energy,2), (round(loudness,2)))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
ggplot(Spotify_truncated, aes(round(energy,1), (round(loudness,1)))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
ggplot(Spotify_truncated, aes(round(energy,2), (round(loudness,1)))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
ggplot(Spotify_truncated, aes(loudness,round(energy,2))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  energy by loudness")
corrplot(cor(Spotify_truncated[,-11]), method = 'number', diag=FALSE)
ggplot(Spotify_truncated, aes(loudness,round(acousticness,2))) +
geom_jitter(color = 'red') +
xlab("Loudness") +
ggtitle("Density Plot:  acousticness by loudness")
ggplot(Spotify_truncated, aes(round(acousticness,2),loudness)) +
geom_jitter(color = 'red') +
xlab("Loudness") +
ggtitle("Density Plot:  acousticness by loudness")
ggplot(Spotify_truncated, aes(round(acousticness,2),loudness)) +
geom_jitter(color = 'red') +
xlab("Acousticness") +
ggtitle("Density Plot:  acousticness by loudness")
#
ggplot(Spotify_truncated, aes(loudness,round(energy,2))) +
geom_jitter(color = 'red') +
xlab("Loudness") +
ggtitle("Density Plot:  energy by loudness")
#Una canzone acustica tende ad avere un rumore in media leggermente minore delle altre
ggplot(Spotify_truncated, aes(round(acousticness,2),loudness)) +
geom_jitter(color = 'red') +
xlab("Acousticness") +
ggtitle("Density Plot:  acousticness by loudness")
ggplot(Spotify_truncated, aes(energy,round(acousticness,2))) +
geom_jitter(color = 'red') +
xlab("Energy") +
ggtitle("Density Plot:  acousticness by energy")
corrplot(cor(Spotify_truncated[,-11]), method = 'number', diag=FALSE)
model_2_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness, data = Spotify_truncated)
summary(model_2_lin)
model_all_relevant_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness, data = Spotify_truncated)
summary(model_all_relevant_lin)
model_positive_corr <- lm(valence ~ danceability+energy+loudness, data = Spotify_truncated)
summary(model_positive_corr)
model_negative_corr <- lm(valence ~ acousticness+instrumentalness, data = Spotify_truncated)
summary(model_negative_corr)
model_1_lin <- lm(valence ~ .-valence, data = Spotify_truncated)
summary(model_1_lin)
model_all_relevant_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness+speechness+liveness, data = Spotify_truncated)
model_all_relevant_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness+speechiness+liveness, data = Spotify_truncated)
summary(model_all_relevant_lin)
model_words <- lm(valence ~ speechiness+liveness, data = Spotify_truncated)
summary(model_words)
#liveness non da nulla
model_words <- lm(valence ~ liveness, data = Spotify_truncated)
summary(model_words)
model_all_relevant_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness+tempo, data = Spotify_truncated)
summary(model_all_relevant_lin)
model_all_relevant_lin <- lm(valence ~ danceability+energy+acousticness+instrumentalness+loudness, data = Spotify_truncated)
summary(model_all_relevant_lin)
plot(valence, danceability)
abline(model_positive_corr, col=3)
model_positive_corr <- lm(valence ~ danceability, data = Spotify_truncated)
summary(model_positive_corr)
plot(valence, danceability)
abline(model_positive_corr, col=3)
model_positive_corr <- lm(valence ~ danceability+energy+loudness, data = Spotify_truncated)
summary(model_positive_corr)
plot(valence, energy)
abline(model_positive_corr, col=3)
plot(valence, loudness)
abline(model_positive_corr, col=3)
mod.out.poly <- lm(valece~ploy(danceability+energy+acousticness+instrumentalness+loudness, 5, raw=TRUE))
mod.out.poly <- lm(valence~ploy(danceability+energy+acousticness+instrumentalness+loudness, 5, raw=TRUE))
mod.out.poly <- lm(valence~poly(danceability+energy+acousticness+instrumentalness+loudness, 5, raw=TRUE))
summary(mod.out.poly)
mod.out.poly <- lm(valence~poly(danceability, 5, raw=TRUE))
summary(mod.out.poly)
model_positive_corr <- lm(valence ~ danceability, data = Spotify_truncated)
summary(model_positive_corr)
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
type <- rep(0, nrow(wine))
type[wine$color == "red"] <- 1
pred.mod <- glm(color ~ .-color, data = wine, family = binomial)
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
type <- rep(0, nrow(wine))
type[wine$color == "red"] <- 1
pred.mod <- glm(color ~ .-color, data = wine, family = binomial)
wine$color_num <- as.integer(factor(wine$color))
type <- rep(0, nrow(wine))
type[wine$color == "red"] <- 1
pred.mod <- glm(color ~ .-color, data = wine, family = binomial)
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
wine$color_num <- as.integer(factor(wine$color))
wine <- wine[, -which(names(wine) %in% c("color"))]
type <- rep(0, nrow(wine))
type[wine$color == "red"] <- 1
pred.mod <- glm(color_num ~ .-color_num, data = wine, family = binomial)
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
type <- rep(0, nrow(wine))
type[wine$color == "white"] <- 1
type <- rep(0, nrow(wine))
type[wine$color == "white"] <- 1
pred.mod <- glm(color ~ .-color, data = wine, family = binomial)
wine$type <- type
pred.mod <- glm(type ~ .-color-color-color_num, data = wine, family = binomial)
pred.mod <- glm(type ~ .-type-color-color_num, data = wine, family = binomial)
pred.mod <- glm(type ~ .-type-color, data = wine, family = binomial)
logistic.prob <- predict(pred.mod, val,  type="response")
data_size <- floor(0.85 * nrow(wine))
train_sample <- sample(seq_len(nrow(wine)), size = data_size, replace = FALSE)
train <- wine[train_sample, ]
val <- wine[-train_sample, ]
type <- rep(0, nrow(train))
type[train$color == "white"] <- 1
wine$type <- type
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
wine$color_num <- as.integer(factor(wine$color))
wine <- wine[, -which(names(wine) %in% c("color"))]
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
data_size <- floor(0.85 * nrow(wine))
train_sample <- sample(seq_len(nrow(wine)), size = data_size, replace = FALSE)
train <- wine[train_sample, ]
val <- wine[-train_sample, ]
type <- rep(0, nrow(train))
type[train$color == "white"] <- 1
train$type <- type
pred.mod <- glm(type ~ .-type-color, data = train, family = binomial)
logistic.prob <- predict(pred.mod, val,  type="response")
logistic.pred <- rep("white", nrow(val))
logistic.pred[logistic.prob>0.5] <- "red"
head(logistic.pred)
val
wine <- read.csv("C:/Users/UTENTE/Downloads/Wine_Quality_Data.csv")
data_size <- floor(0.85 * nrow(wine))
train_sample <- sample(seq_len(nrow(wine)), size = data_size, replace = FALSE)
train <- wine[train_sample, ]
val <- wine[-train_sample, ]
type <- rep(0, nrow(train))
type[train$color == "white"] <- 1
train$type <- type
pred.mod <- glm(type ~ .-type-color, data = train, family = binomial)
logistic.prob <- predict(pred.mod, val,  type="response")
logistic.pred <- rep("red", nrow(val))
logistic.pred[logistic.prob>0.5] <- "white"
head(logistic.pred)
val
head(val)
tail(logistic.pred)
tail(val)
happiness_2021 <- read.csv("./datasets/happiness_2021_complete.csv")
setwd("~/GitHub/Statistical_Learning_Spotify_Project/World_Happiness_Report")
happiness_2021 <- read.csv("./datasets/happiness_2021_complete.csv")
# Check if any missing values exist in the data frame
# No missing values
any(is.na(happiness_2021))
# Get the labels of the columns
column_labels <- colnames(happiness_2021)
summary(happiness_2021)
str(happiness_2021)
